Prefetch any fetcher function call, e.g. a package source.

All options can be repeated with the last value taken,
and can placed both before and after the parameters.

Usage:
  nix-prefetch [ -f <file> | --file <file>
               | -A <attr> | --attr <attr>
               | -E <expr> | --expr <expr>
               | -i <index> | --index <index>
               | -F (<file> | <attr>) | --fetcher (<file> | <attr>)
               | -t <hash-algo> | --type <hash-algo> | --hash-algo <hash-algo>
               | -h <hash> | --hash <hash>
               | --input <type> | --output <type> | --fetch-url | --print-path
               | --force | -q | --quiet | -v | --verbose | -vv | --debug | --skip-hash ]...
               ( -f <file> | --file <file> | <file>
               | -A <attr> | --attr <attr> | <attr>
               | -E <expr> | --expr <expr> | <expr>
               | <url> )
               [hash]
               [ --help
               | [--]
                 [ --<name>
                   ( -f <file> | --file <file>
                   | -A <attr> | --attr <attr>
                   | -E <expr> | --expr <expr>
                   | <str> ) ]... ]
  nix-prefetch [-f <file> | --file <file> | --deep | -v | --verbose | -vv | --debug]... (-l | --list)
  nix-prefetch --help
  nix-prefetch --version

Examples:
  nix-prefetch hello
  nix-prefetch hello --help
  nix-prefetch hello --hash-algo sha512
  nix-prefetch hello.src
  nix-prefetch 'let name = "hello"; in pkgs.${name}'
  nix-prefetch 'callPackage (pkgs.path + /pkgs/applications/misc/hello) { }'
  nix-prefetch --file '<nixos-unstable>' hello
  nix-prefetch hello 0000000000000000000000000000000000000000000000000000
  nix-prefetch du-dust.cargoDeps --fetcher --file '<nixpkgs/pkgs/build-support/rust/fetchcargo.nix>'

Options:
  -f, --file       When either an attribute or expression is given it has to be a path to Nixpkgs,
                   otherwise it can be a file directly pointing to a fetcher function or package derivation.
  -A, --attr       An attribute path relative to the `pkgs` of the imported Nixpkgs.
  -E, --expr       A Nix expression with the `pkgs` of the imported Nixpkgs put into scope,
                   evaluating to either a fetcher function or package derivation.
  -i, --index      Which element of the list of sources should be used when multiple sources are available.
  -F, --fetcher    When the fetcher of the source cannot be automatically determined,
                   this option can be used to pass it manually instead.
  -t, --type,
      --hash-algo  What algorithm should be used for the output hash of the resulting derivation.
                   The following algorithms are allowed: md5 (deprecated), sha1, sha256, or sha512 [default: sha256].
  -h, --hash       When the output hash of the resulting derivation is already known,
                   it can be used to check whether it is already exists within the Nix store.
  --fetch-url      Fetch only the URL. This converts e.g. the fetcher fetchFromGitHub to fetchurl for its URL,
                   and the hash options will be applied to fetchurl instead. The name argument will be copied over.
  --print-path     Print the output path of the resulting derivation.
  --print-json     Print the fetcher arguments, including the hash argument, as a JSON object.
  --force          Always redetermine the hash, even if the given hash is already determined to be valid.
  -q, --quiet      No additional output.
  -v, --verbose    Verbose output, so it is easier to determine what is being done.
  -vv, --debug     Even more verbose output (meant for debugging purposes).
  --skip-hash      Skip determining the hash (meant for debugging purposes).
  --deep           Rather than only listing the top-level fetchers, deep search Nixpkgs for fetchers (slow).
  -l, --list       List the available fetchers in Nixpkgs.
  --version        Show version information.
  --help           Show help message.

Note: This program is EXPERIMENTAL and subject to change.
